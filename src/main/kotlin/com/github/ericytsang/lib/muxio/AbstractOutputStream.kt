package com.github.ericytsang.lib.muxio

import java.io.IOException
import java.io.OutputStream

/**
 * used to multiplex and write data into the underlying shared
 * [multiplexedOutputStream] that other [AbstractOutputStream]s also write
 * into. The data written by this stream into the [multiplexedOutputStream] is
 * always immediately preceded by headers generated by the [headerFactory].
 *
 * @param multiplexedOutputStream the [OutputStream] that data should be
 * multiplexed and written into. may be shared by other
 * [AbstractOutputStream]s.
 */
abstract class AbstractOutputStream:OutputStream()
{
    final override fun write(b:Int) = write(byteArrayOf(b.toByte()))
    final override fun write(b:ByteArray) = write(b,0,b.size)
    final override fun write(b:ByteArray,off:Int,len:Int) = state.write(b,off,len)
    final override fun close() = state.close()

    /**
     * this method should be implemented such that any calls to [doClose] will
     * make an IOException thrown from this method right away.
     *
     * @param b [ByteArray] of data that will be sent from.
     * @param off specifies a starting index in [b].
     * @param len specifies an ending index in [b].
     */
    protected abstract fun doWrite(b:ByteArray,off:Int,len:Int)

    /**
     * closes the stream. once closed, any subsequent calls to write will throw
     * an [IOException]. any ongoing calls to write immediately throw an
     * [IOException].
     */
    protected abstract fun doClose()

    private var state:State = Opened()

    private interface State
    {
        fun write(b:ByteArray,off:Int,len:Int)
        fun close()
    }

    private inner class Opened:State
    {
        override fun write(b:ByteArray,off:Int,len:Int) = synchronized(this)
        {
            doWrite(b,off,len)
        }

        override fun close()
        {
            state = Closed()
        }
    }

    private inner class Closed:State
    {
        init
        {
            doClose()
        }

        override fun write(b:ByteArray,off:Int,len:Int)
        {
            throw IOException("stream closed; cannot write.")
        }

        override fun close() = Unit
    }
}
